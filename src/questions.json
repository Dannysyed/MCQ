[
    {
        "text": "What is a widget's build method primarily used for?",
        "options": [
            "Describing how the widget appears in terms of UI",
            "Downloading the build.gradle file to allow for Android integration",
            "Creating a State variable which will change based on user input",
            "Creating a Flutter application"
        ],
        "answer": "Describing how the widget appears in terms of UI"
    },
    {
        "text": "What is one use of the : operator in Dart?",
        "options": [
            "Creating a null safe typing",
            "Building a widget in the UI",
            "Invoking a parent constructor",
            "A special type of for loop"
        ],
        "answer": "Invoking a parent constructor"
    },
    {
        "text": "Suppose we want our Student class to inherit from Person. How would we do this in Dart?",
        "options": [
            "class Student extends Person",
            "class Student : Person",
            "class Student -> Person",
            "class Student inherits Person"
        ],
        "answer": "class Student extends Person"
    },
    {
        "text": "Functions are not 'first class' in Dart, so they cannot be assigned to a variable directly.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "text": "Which widget is often used to create a small circular button at the bottom of the screen in Android?",
        "options": [
            "ElevatedButton",
            "CupertinoButton",
            "FloatingActionButton",
            "Button"
        ],
        "answer": "FloatingActionButton"
    },
    {
        "text": "Suppose you have a Row widget. What would you generally put in its children argument?",
        "options": [
            "Other widgets you wish to position together in a row",
            "Row does not have a children argument",
            "Code to center the widgets in the middle",
            "A controller to handle state changes for the row"
        ],
        "answer": "Other widgets you wish to position together in a row"
    },
    {
        "text": "A CupertinoButton is designed to look like an iOS button.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "text": "What is a Hero widget commonly used for?",
        "options": [
            "Creating a centered layout for your application",
            "Displaying an iOS style button",
            "Animating the transition between two screens",
            "Rotating or scaling widgets when you press a button"
        ],
        "answer": "Animating the transition between two screens"
    },
    {
        "text": "Which Flutter widget would we use to display cards for every element of a collection?",
        "options": [
            "Scaffold",
            "ListView",
            "AppBar",
            "RecyclerView"
        ],
        "answer": "ListView"
    },
    {
        "text": "Which widget can be used to provide event listeners such as onTap to widgets that don't have that functionality like Cards?",
        "options": [
            "ElevatedButton",
            "onClickListener",
            "GestureDetector",
            "Hero"
        ],
        "answer": "GestureDetector"
    },
    {
        "text": "A widget like a shopping cart icon with a counter that increases each time the user adds a new item should be stateless.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "text": "Flutter can be used to build both Android and iOS applications.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "text": "When the properties of an AnimatedContainer change (for example, the height), they will be animated automatically.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "text": "When the state of a Stateful Widget changes, the UI will be rebuilt.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "text": "The data in Firebase Realtime Database is structured as JSON.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "text": "What would the value of myString be after the following code runs:\nval myInt = 4;\nval myString = if (myInt > 4) \"Hello\" else \"Goodbye\"",
        "options": [
            "This code is incorrect and will not work",
            "Hello",
            "Goodbye",
            "4"
        ],
        "answer": "Goodbye"
    },
    {
        "text": "What code would we generally put inside onBindViewHolder for a FirebaseRecyclerView?",
        "options": [
            "Setting whether the RecyclerView should be linear or with a grid",
            "Taking data from the model and setting the widgets' properties with it",
            "Getting a reference to the RecyclerView widget",
            "Constructors for ViewHolder objects with inflaters"
        ],
        "answer": "Taking data from the model and setting the widgets' properties with it"
    },
    {
        "text": "Which file would we add our dependencies to?",
        "options": [
            "build.gradle",
            "dependencies.json",
            "AndroidManifest.xml",
            "R.java"
        ],
        "answer": "build.gradle"
    },
    {
        "text": "What is one of the purposes of the FirebaseRecyclerAdapter class?",
        "options": [
            "Running a query from a Firebase Database",
            "Providing a simple library for authentication with Firebase",
            "Determining whether a RecyclerView will be a grid or a column",
            "Showing the data from Firebase to the user"
        ],
        "answer": "Showing the data from Firebase to the user"
    },
    {
        "text": "What does the 'var' keyword do in Kotlin?",
        "options": [
            "Creates a null safe variable",
            "Creates a variable that can be reassigned",
            "The var keyword does not exist in Kotlin",
            "Creates an immutable variable that cannot be reassigned"
        ],
        "answer": "Creates a variable that can be reassigned"
    },
    {
        "text": "What will the following loop do:\nfor (x in 0..100)\nLog.i('test', x)}",
        "options": [
            "Crash the application",
            "Print the word 'Test' 101 times",
            "Print all numbers from 0 to 100",
            "Print all numbers from 1 to 99"
        ],
        "answer": "Print all numbers from 0 to 100"
    },
    {
        "text": "What would the value of myString be after the following code runs:\nval myInt = 4;\nval myString = if (myInt > 4) 'Hello' else 'Goodbye'",
        "options": [
            "This code is incorrect and will not work",
            "Hello",
            "Goodbye",
            "4"
        ],
        "answer": "Goodbye"
    },
    {
        "text": "What does the '?' operator do in Kotlin?\nFor example: myTextView?.text = 'Hello'",
        "options": [
            "Adds the object to a database automatically",
            "Encapsulates the object",
            "Only invokes the method if the object is not null",
            "Sets the value of a widget to be null"
        ],
        "answer": "Only invokes the method if the object is not null"
    },
    {
        "text": "What is a common use case for Kotlin's SAM conversion?",
        "options": [
            "An onClickListener for a button",
            "Inheriting from AppCompatActivity",
            "Converting a file from Java to Kotlin",
            "Making code null safe"
        ],
        "answer": "An onClickListener for a button"
    },
    {
        "text": "What is one of the purposes of the FirebaseRecyclerAdapter class?",
        "options": [
            "Determining whether a RecyclerView will be a grid or a column",
            "Providing a simple library for authentication with Firebase",
            "Running a query from a Firebase Database",
            "Showing the data from Firebase to the user"
        ],
        "answer": "Showing the data from Firebase to the user"
    },
    {
        "text": "What is the FirebaseRecyclerOptions class used for?",
        "options": [
            "Configuring a FirebaseRecyclerAdapter with a query and a Kotlin class",
            "Adding an XML file to the adapter",
            "Querying data from Firebase",
            "Setting whether the Firebase Recycler should be linear or grid"
        ],
        "answer": "Configuring a FirebaseRecyclerAdapter with a query and a Kotlin class"
    },
    {
        "text": "What does the following class declaration mean:\nclass MainActivity : AppCompatActivity() {}",
        "options": [
            "Create a method called AppCompatActivity returning a MainActivity object",
            "Create a class and call a method called 'AppCompatActivity'",
            "This is missing the 'extends' keyword and will cause a syntax error",
            "Create a class inheriting from AppCompatActivity"
        ],
        "answer": "Create a class inheriting from AppCompatActivity"
    },
    {
        "text": "What would the following Firebase rule do?\n'write' : 'auth.uid != null'",
        "options": [
            "Only allow logged in users to write to the database",
            "Only allow users to write to messages in their own account",
            "Only allow admins to write to the database",
            "Allow anyone to write to the database"
        ],
        "answer": "Only allow logged in users to write to the database"
    },
    {
        "text": "What was the major use case of the Glide library in this course?",
        "options": [
            "Displaying images from cloud storage",
            "Creating a RecyclerView for Firebase",
            "Querying the database we've created",
            "Providing an easy to use Authentication login screen"
        ],
        "answer": "Displaying images from cloud storage"
    },
    {
        "text": "What does the setState() method do in Flutter?",
        "options": [
            "Updates the state of the widget and triggers a rebuild of the UI.",
            "Sets the state to null.",
            "Adds a new state to the widget.",
            "Removes the widget from the widget tree."
        ],
        "answer": "Updates the state of the widget and triggers a rebuild of the UI."
    },
    {
        "text": "Which of the following is true about the main function in Dart?",
        "options": [
            "It is required in every Dart program.",
            "It is used to define the entry point of the program.",
            "It is where the build method of a widget is called.",
            "It is used to create instances of classes."
        ],
        "answer": "It is used to define the entry point of the program."
    },
    {
        "text": "What is the purpose of the MaterialApp widget in a Flutter application?",
        "options": [
            "It defines the theme of the application.",
            "It provides a container for other widgets.",
            "It configures the navigation for the application.",
            "It is required to define the layout of the application."
        ],
        "answer": "It configures the navigation for the application."
    },
    {
        "text": "How is routing typically implemented in a Flutter application?",
        "options": [
            "Using the Navigator widget.",
            "By directly manipulating the widget tree.",
            "By using the MaterialApp widget.",
            "By creating custom routing logic."
        ],
        "answer": "By using the MaterialApp widget."
    },
    {
        "text": "What is the purpose of the initState() method in a Stateful widget?",
        "options": [
            "It initializes the state of the widget.",
            "It defines the build method of the widget.",
            "It is called when the widget is removed from the widget tree.",
            "It is used to define event listeners for the widget."
        ],
        "answer": "It initializes the state of the widget."
    },
    {
        "text": "Which widget is used to create a scrollable list of widgets in Flutter?",
        "options": [
            "ListView",
            "Column",
            "GridView",
            "SingleChildScrollView"
        ],
        "answer": "ListView"
    },
    {
        "text": "What is the purpose of the crossAxisAlignment property in a Row widget?",
        "options": [
            "It defines how children widgets are aligned vertically.",
            "It defines how children widgets are aligned horizontally.",
            "It defines how much space the Row widget occupies in its parent.",
            "It defines how the Row widget responds to overflow."
        ],
        "answer": "It defines how children widgets are aligned vertically."
    },
    {
        "text": "In Flutter, how can you pass data between screens?",
        "options": [
            "Using the context object.",
            "Using the setState() method.",
            "Using named routes.",
            "Using constructor parameters."
        ],
        "answer": "Using named routes."
    },
    {
        "text": "What is the purpose of the mainAxisSize property in a Row or Column widget?",
        "options": [
            "It defines the size of the main axis.",
            "It defines the size of the cross axis.",
            "It determines how much space the widget occupies in its parent.",
            "It determines how the widget is aligned within its parent."
        ],
        "answer": "It defines the size of the main axis."
    },
    {
        "text": "What is the purpose of the mainAxisAlignment property in a Row widget?",
        "options": [
            "It defines how children widgets are aligned vertically.",
            "It defines how children widgets are aligned horizontally.",
            "It defines how much space the Row widget occupies in its parent.",
            "It defines how the Row widget responds to overflow."
        ],
        "answer": "It defines how children widgets are aligned horizontally."
    },
    {
        "text": "What is the purpose of the crossAxisAlignment property in a Row widget?",
        "options": [
            "It defines how children widgets are aligned vertically.",
            "It defines how children widgets are aligned horizontally.",
            "It defines how much space the Row widget occupies in its parent.",
            "It defines how the Row widget responds to overflow."
        ],
        "answer": "It defines how children widgets are aligned vertically."
    },
    {
        "text": "In Flutter, how can you pass data between screens?",
        "options": [
            "Using the context object.",
            "Using the setState() method.",
            "Using named routes.",
            "Using constructor parameters."
        ],
        "answer": "Using named routes."
    },
    {
        "text": "What is the purpose of the mainAxisSize property in a Row or Column widget?",
        "options": [
            "It defines the size of the main axis.",
            "It defines the size of the cross axis.",
            "It determines how much space the widget occupies in its parent.",
            "It determines how the widget is aligned within its parent."
        ],
        "answer": "It defines the size of the main axis."
    },
    {
        "text": "What is the purpose of the mainAxisAlignment property in a Row widget?",
        "options": [
            "It defines how children widgets are aligned vertically.",
            "It defines how children widgets are aligned horizontally.",
            "It defines how much space the Row widget occupies in its parent.",
            "It defines how the Row widget responds to overflow."
        ],
        "answer": "It defines how children widgets are aligned horizontally."
    },
    {
        "text": "Which of the following is true about the main function in Dart?",
        "options": [
            "It is required in every Dart program.",
            "It is used to define the entry point of the program.",
            "It is where the build method of a widget is called.",
            "It is used to create instances of classes."
        ],
        "answer": "It is used to define the entry point of the program."
    },
    {
        "text": "What is the purpose of the MaterialApp widget in a Flutter application?",
        "options": [
            "It defines the theme of the application.",
            "It provides a container for other widgets.",
            "It configures the navigation for the application.",
            "It is required to define the layout of the application."
        ],
        "answer": "It configures the navigation for the application."
    },
    {
        "text": "How is routing typically implemented in a Flutter application?",
        "options": [
            "Using the Navigator widget.",
            "By directly manipulating the widget tree.",
            "By using the MaterialApp widget.",
            "By creating custom routing logic."
        ],
        "answer": "By using the MaterialApp widget."
    },
    {
        "text": "What is the purpose of the initState() method in a Stateful widget?",
        "options": [
            "It initializes the state of the widget.",
            "It defines the build method of the widget.",
            "It is called when the widget is removed from the widget tree.",
            "It is used to define event listeners for the widget."
        ],
        "answer": "It initializes the state of the widget."
    },
    {
        "text": "Which widget is used to create a scrollable list of widgets in Flutter?",
        "options": [
            "ListView",
            "Column",
            "GridView",
            "SingleChildScrollView"
        ],
        "answer": "ListView"
    },
    {
        "text": "What is the purpose of the setState() method in Flutter?",
        "options": [
            "To update the state of the widget and trigger a rebuild of the UI.",
            "To set the state to null.",
            "To add a new state to the widget.",
            "To remove the widget from the widget tree."
        ],
        "answer": "To update the state of the widget and trigger a rebuild of the UI."
    },
    {
        "text": "What is the equivalent of a constructor in Kotlin?",
        "options": [
            "init block",
            "constructor keyword",
            "create function",
            "init function"
        ],
        "answer": "init block"
    },
    {
        "text": "In Flutter, which widget is used to create a row of items with a horizontal direction?",
        "options": [
            "Column",
            "Row",
            "ListView",
            "GridView"
        ],
        "answer": "Row"
    },
    {
        "text": "What is the purpose of the 'lateinit' keyword in Kotlin?",
        "options": [
            "To declare a property that can be initialized later",
            "To declare a property that cannot be modified after initialization",
            "To declare a property that must be initialized in the constructor",
            "To declare a property that is initialized lazily"
        ],
        "answer": "To declare a property that can be initialized later"
    },
    {
        "text": "Which of the following is true about Dart's type system?",
        "options": [
            "Dart is a dynamically typed language",
            "Dart is a statically typed language",
            "Dart's type system is similar to Java",
            "Dart does not support type annotations"
        ],
        "answer": "Dart is a statically typed language"
    },
    {
        "text": "What is the purpose of the 'lateinit' keyword in Kotlin?",
        "options": [
            "To declare a property that can be initialized later",
            "To declare a property that cannot be modified after initialization",
            "To declare a property that must be initialized in the constructor",
            "To declare a property that is initialized lazily"
        ],
        "answer": "To declare a property that can be initialized later"
    },
    {
        "text": "In Flutter, what does the main function typically do?",
        "options": [
            "Defines the entry point of the application",
            "Initializes the application's state",
            "Defines the layout of the application",
            "Handles user interactions"
        ],
        "answer": "Defines the entry point of the application"
    },
    {
        "text": "What is the equivalent of a constructor in Kotlin?",
        "options": [
            "init block",
            "constructor keyword",
            "create function",
            "init function"
        ],
        "answer": "init block"
    },
    {
        "text": "In Flutter, which widget is used to create a column of items with a vertical direction?",
        "options": [
            "Column",
            "Row",
            "ListView",
            "GridView"
        ],
        "answer": "Column"
    },
    {
        "text": "What is the purpose of the 'lateinit' keyword in Kotlin?",
        "options": [
            "To declare a property that can be initialized later",
            "To declare a property that cannot be modified after initialization",
            "To declare a property that must be initialized in the constructor",
            "To declare a property that is initialized lazily"
        ],
        "answer": "To declare a property that can be initialized later"
    },
    {
        "text": "Which of the following is true about Dart's type system?",
        "options": [
            "Dart is a dynamically typed language",
            "Dart is a statically typed language",
            "Dart's type system is similar to Java",
            "Dart does not support type annotations"
        ],
        "answer": "Dart is a statically typed language"
    }
]